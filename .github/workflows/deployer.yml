name: Deployer

on:
  release:
    types:
      - published
  workflow_run:
    branches:
      - main
    workflows:
      - "Builder"
    types:
      - completed

concurrency:
  group: deployer

jobs:
  compute-build-info:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    outputs:
      sha_short: ${{ steps.build-info.outputs.sha_short }}
      latest_tag: ${{ steps.build-info.outputs.latest_tag }}
      package_version: ${{ steps.build-info.outputs.package_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

          version=${GITHUB_REF#refs/*/}
          echo "::set-output name=latest_tag::$version"

          package_version=$(cat ./package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
          echo "::set-output name=package_version::$package_version"

  deploy-beta-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-20.04
    needs:
      - compute-build-info
    env:
      DEPLOY: ${{ secrets.TESTNET_DEPLOY }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: ${{ secrets.TESTNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.TESTNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.TESTNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_KEY
            WEB_APP_ENVIRONMENT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB_APP_ENVIRONMENT
            WEB_APP_NAME:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB_APP_NAME
            WEB_APP_SECRET:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB_APP_SECRET
            WEBSITE_URL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEBSITE_URL
            SUPPORT_MAIL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SUPPORT_MAIL
            API_URL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/API_URL
            NEAR_TIPPING_CONTRACT_ADDRESS:${{ secrets.TESTNET_GCP_PROJECT_ID }}/NEAR_TIPPING_CONTRACT_ADDRESS
            FIREBASE_PROJECT_ID:${{ secrets.TESTNET_GCP_PROJECT_ID }}/FIREBASE_PROJECT_ID
            FIREBASE_API_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/FIREBASE_API_KEY
            FIREBASE_MESSAGING_SENDER_ID:${{ secrets.TESTNET_GCP_PROJECT_ID }}/FIREBASE_MESSAGING_SENDER_ID
            FIREBASE_STORAGE_BUCKET:${{ secrets.TESTNET_GCP_PROJECT_ID }}/FIREBASE_STORAGE_BUCKET
            WEB_FIREBASE_APP_ID:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB_FIREBASE_APP_ID
            WEB_FIREBASE_MEASUREMENT_ID:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB_FIREBASE_MEASUREMENT_ID
            WEB_SENTRY_DSN:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB_SENTRY_DSN
            WEB_FACEBOOK_APP_ID:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB_FACEBOOK_APP_ID
            WEB_DNS:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB_DNS
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-web myriadsocial/myriad-web \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.sha_short }} \
              --set-string config.appEnvironment=${{ steps.secrets.outputs.WEB_APP_ENVIRONMENT }} \
              --set-string config.appName="${{ steps.secrets.outputs.WEB_APP_NAME }}" \
              --set-string config.appVersion=${{ needs.compute-build-info.outputs.package_version }} \
              --set-string config.appAuthURL=https://${{ steps.secrets.outputs.WEB_DNS }} \
              --set-string config.appSecret=${{ steps.secrets.outputs.WEB_APP_SECRET }} \
              --set-string config.websiteURL=${{ steps.secrets.outputs.WEBSITE_URL }} \
              --set-string config.supportMail=${{ steps.secrets.outputs.SUPPORT_MAIL }} \
              --set-string config.apiURL=${{ steps.secrets.outputs.API_URL }} \
              --set-string config.near.tippingContractAddress=${{ steps.secrets.outputs.NEAR_TIPPING_CONTRACT_ADDRESS }} \
              --set-string config.firebase.projectId=${{ steps.secrets.outputs.FIREBASE_PROJECT_ID }} \
              --set-string config.firebase.apiKey=${{ steps.secrets.outputs.FIREBASE_API_KEY }} \
              --set-string config.firebase.messagingSenderId=${{ steps.secrets.outputs.FIREBASE_MESSAGING_SENDER_ID }} \
              --set-string config.firebase.storageBucket=${{ steps.secrets.outputs.FIREBASE_STORAGE_BUCKET }} \
              --set-string config.firebase.appId=${{ steps.secrets.outputs.WEB_FIREBASE_APP_ID }} \
              --set-string config.firebase.measurementId=${{ steps.secrets.outputs.WEB_FIREBASE_MEASUREMENT_ID }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.WEB_SENTRY_DSN }} \
              --set-string config.facebook.appId=${{ steps.secrets.outputs.WEB_FACEBOOK_APP_ID }} \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/proxy-body-size"="100m" \
              --set-string ingress.annotations."nginx\.org/client-max-body-size"="100m" \
              --set-string ingress.hosts[0].host=${{ steps.secrets.outputs.WEB_DNS }} \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-app-tls \
              --set-string ingress.tls[0].hosts[0]=${{ steps.secrets.outputs.WEB_DNS }} \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=2 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=2 \
              --set autoscaling.maxReplicas=100 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-web
      - name: Sleuth webhook
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.TESTNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.WEB_SLEUTH_WEBHOOK }}

  deploy-pre-release:
    if: "startsWith(github.ref, 'refs/tags/') && github.event.release.prerelease && contains(needs.compute-build-info.outputs.latest_tag, 'rc')"
    runs-on: ubuntu-20.04
    needs:
      - compute-build-info
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: ${{ secrets.MAINNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.MAINNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.MAINNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_KEY
            WEB_APP_ENVIRONMENT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_APP_ENVIRONMENT
            WEB_APP_NAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_APP_NAME
            WEB_APP_SECRET:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_APP_SECRET
            WEBSITE_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEBSITE_URL
            SUPPORT_MAIL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SUPPORT_MAIL
            API_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/API_URL
            NEAR_TIPPING_CONTRACT_ADDRESS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/NEAR_TIPPING_CONTRACT_ADDRESS
            FIREBASE_PROJECT_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_PROJECT_ID
            FIREBASE_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_API_KEY
            FIREBASE_MESSAGING_SENDER_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_MESSAGING_SENDER_ID
            FIREBASE_STORAGE_BUCKET:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_STORAGE_BUCKET
            WEB_FIREBASE_APP_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FIREBASE_APP_ID
            WEB_FIREBASE_MEASUREMENT_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FIREBASE_MEASUREMENT_ID
            WEB_SENTRY_DSN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_SENTRY_DSN
            WEB_FACEBOOK_APP_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FACEBOOK_APP_ID
            WEB_DNS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_DNS
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-web myriadsocial/myriad-web \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.appEnvironment=${{ steps.secrets.outputs.WEB_APP_ENVIRONMENT }} \
              --set-string config.appName="${{ steps.secrets.outputs.WEB_APP_NAME }}" \
              --set-string config.appVersion=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.appAuthURL=https://${{ steps.secrets.outputs.WEB_DNS }} \
              --set-string config.appSecret=${{ steps.secrets.outputs.WEB_APP_SECRET }} \
              --set-string config.websiteURL=${{ steps.secrets.outputs.WEBSITE_URL }} \
              --set-string config.supportMail=${{ steps.secrets.outputs.SUPPORT_MAIL }} \
              --set-string config.apiURL=${{ steps.secrets.outputs.API_URL }} \
              --set-string config.near.tippingContractAddress=${{ steps.secrets.outputs.NEAR_TIPPING_CONTRACT_ADDRESS }} \
              --set-string config.firebase.projectId=${{ steps.secrets.outputs.FIREBASE_PROJECT_ID }} \
              --set-string config.firebase.apiKey=${{ steps.secrets.outputs.FIREBASE_API_KEY }} \
              --set-string config.firebase.messagingSenderId=${{ steps.secrets.outputs.FIREBASE_MESSAGING_SENDER_ID }} \
              --set-string config.firebase.storageBucket=${{ steps.secrets.outputs.FIREBASE_STORAGE_BUCKET }} \
              --set-string config.firebase.appId=${{ steps.secrets.outputs.WEB_FIREBASE_APP_ID }} \
              --set-string config.firebase.measurementId=${{ steps.secrets.outputs.WEB_FIREBASE_MEASUREMENT_ID }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.WEB_SENTRY_DSN }} \
              --set-string config.facebook.appId=${{ steps.secrets.outputs.WEB_FACEBOOK_APP_ID }} \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/proxy-body-size"="100m" \
              --set-string ingress.annotations."nginx\.org/client-max-body-size"="100m" \
              --set-string ingress.hosts[0].host=${{ steps.secrets.outputs.WEB_DNS }} \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-app-tls \
              --set-string ingress.tls[0].hosts[0]=${{ steps.secrets.outputs.WEB_DNS }} \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=3 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=3 \
              --set autoscaling.maxReplicas=100 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-web
      - name: Sleuth webhook
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.MAINNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.WEB_SLEUTH_WEBHOOK }}

  deploy-release:
    if: "startsWith(github.ref, 'refs/tags/') && !github.event.release.prerelease"
    runs-on: ubuntu-20.04
    needs:
      - compute-build-info
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: ${{ secrets.MAINNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.MAINNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.MAINNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_KEY
            WEB_APP_ENVIRONMENT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_APP_ENVIRONMENT
            WEB_APP_NAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_APP_NAME
            WEB_APP_SECRET:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_APP_SECRET
            WEBSITE_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEBSITE_URL
            SUPPORT_MAIL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SUPPORT_MAIL
            API_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/API_URL
            NEAR_TIPPING_CONTRACT_ADDRESS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/NEAR_TIPPING_CONTRACT_ADDRESS
            FIREBASE_PROJECT_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_PROJECT_ID
            FIREBASE_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_API_KEY
            FIREBASE_MESSAGING_SENDER_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_MESSAGING_SENDER_ID
            FIREBASE_STORAGE_BUCKET:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_STORAGE_BUCKET
            WEB_FIREBASE_APP_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FIREBASE_APP_ID
            WEB_FIREBASE_MEASUREMENT_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FIREBASE_MEASUREMENT_ID
            WEB_SENTRY_DSN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_SENTRY_DSN
            WEB_FACEBOOK_APP_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FACEBOOK_APP_ID
            WEB_DNS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_DNS
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-web myriadsocial/myriad-web \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.appEnvironment=${{ steps.secrets.outputs.WEB_APP_ENVIRONMENT }} \
              --set-string config.appName="${{ steps.secrets.outputs.WEB_APP_NAME }}" \
              --set-string config.appVersion=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.appAuthURL=https://${{ steps.secrets.outputs.WEB_DNS }} \
              --set-string config.appSecret=${{ steps.secrets.outputs.WEB_APP_SECRET }} \
              --set-string config.websiteURL=${{ steps.secrets.outputs.WEBSITE_URL }} \
              --set-string config.supportMail=${{ steps.secrets.outputs.SUPPORT_MAIL }} \
              --set-string config.apiURL=${{ steps.secrets.outputs.API_URL }} \
              --set-string config.near.tippingContractAddress=${{ steps.secrets.outputs.NEAR_TIPPING_CONTRACT_ADDRESS }} \
              --set-string config.firebase.projectId=${{ steps.secrets.outputs.FIREBASE_PROJECT_ID }} \
              --set-string config.firebase.apiKey=${{ steps.secrets.outputs.FIREBASE_API_KEY }} \
              --set-string config.firebase.messagingSenderId=${{ steps.secrets.outputs.FIREBASE_MESSAGING_SENDER_ID }} \
              --set-string config.firebase.storageBucket=${{ steps.secrets.outputs.FIREBASE_STORAGE_BUCKET }} \
              --set-string config.firebase.appId=${{ steps.secrets.outputs.WEB_FIREBASE_APP_ID }} \
              --set-string config.firebase.measurementId=${{ steps.secrets.outputs.WEB_FIREBASE_MEASUREMENT_ID }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.WEB_SENTRY_DSN }} \
              --set-string config.facebook.appId=${{ steps.secrets.outputs.WEB_FACEBOOK_APP_ID }} \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/proxy-body-size"="100m" \
              --set-string ingress.annotations."nginx\.org/client-max-body-size"="100m" \
              --set-string ingress.hosts[0].host=${{ steps.secrets.outputs.WEB_DNS }} \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-app-tls \
              --set-string ingress.tls[0].hosts[0]=${{ steps.secrets.outputs.WEB_DNS }} \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=3 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=3 \
              --set autoscaling.maxReplicas=100 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-web
      - name: Sleuth webhook
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.MAINNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.WEB_SLEUTH_WEBHOOK }}
