name: Release-candidate automation

on:
  push:
    branches:
      - release-[0-9]+.[0-9]+.[0-9]+

concurrency:
  group: release-candidate-automation

jobs:
  compute-next-rc-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Compute next RC tag
        shell: bash
        run: |
          # Get last rc tag if exists, else set it to {version}-rc1
          version=${GITHUB_REF#refs/heads/release-}
          echo "$version"
          echo "::set-output name=version::$version"
          git tag -l
          last_rc=$(git tag -l "$version-rc*" | sort -V | tail -n 1)
          if [ -n "$last_rc" ]; then
            suffix=$(echo "$last_rc" | grep -Eo '[0-9]+$')
            echo $suffix
            ((suffix++))
            echo $suffix
            echo "::set-output name=new_tag::$version-rc$suffix"
            echo "::set-output name=first_rc::false"
          else
            echo "::set-output name=new_tag::$version-rc1"
            echo "::set-output name=first_rc::true"
          fi

  apply-rc-tag:
    runs-on: ubuntu-latest

    needs: ['compute-next-rc-tag']

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Apply new tag
        uses: mathieudutour/github-tag-action@v5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ''
          custom_tag: ${{ needs.compute-next-rc-tag.outputs.new_tag }}

  build-and-publish-docker-image:
    runs-on: ubuntu-latest

    needs: ['apply-rc-tag']

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=date::$(date +'%Y%m%d')"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          file: .maintain/docker/Dockerfile
          tags: |
            ${{ github.repository }}:${{ needs.apply-rc-tag.outputs.new_tag }}
            ${{ github.repository }}:latest-rc
          build-args: |
            VCS_REF=${{ steps.build-info.sha_short }}
            BUILD_DATE=${{ steps.build-info.date }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest

    needs: ['compute-next-rc-tag', 'build-and-publish-docker-image']

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.STG_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.STG_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get the GKE credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: myriad
          location: asia-southeast2-a

      - name: Get secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            firebaseProjectId:${{ secrets.STG_GCP_PROJECT_ID }}/firebaseProjectId
            firebaseAPIkey:${{ secrets.STG_GCP_PROJECT_ID }}/firebaseAPIkey
            firebaseMessagingSenderId:${{ secrets.STG_GCP_PROJECT_ID }}/firebaseMessagingSenderId
            firebaseAppId:${{ secrets.STG_GCP_PROJECT_ID }}/firebaseAppId
            cloudinaryCloudName:${{ secrets.STG_GCP_PROJECT_ID }}/cloudinaryCloudName
            cloudinaryAPIKey:${{ secrets.STG_GCP_PROJECT_ID }}/cloudinaryAPIKey
            cloudinarySecret:${{ secrets.STG_GCP_PROJECT_ID }}/cloudinarySecret
            facebookAppId:${{ secrets.STG_GCP_PROJECT_ID }}/facebookAppId
            twitterBearerToken:${{ secrets.STG_GCP_PROJECT_ID }}/twitterBearerToken

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Deploy
        run: |
          helm upgrade myriad-web .maintain/kubernetes \
            --install \
            --set-string image.tag=${{ needs.compute-next-rc-tag.outputs.new_tag }} \
            --set-string config.appName=myriad-staging \
            --set-string config.nextAuthURL=https://app.stg.myriad.systems \
            --set-string config.nextSecret=b53fdfd09ee04c267efcde87b4eab030 \
            --set-string config.apiURL=https://api.stg.myriad.systems \
            --set-string config.rpcWSURL=wss://rpc.stg.myriad.systems \
            --set-string config.firebase.projectId=${{ steps.secrets.outputs.firebaseProjectId }} \
            --set-string config.firebase.apiKey=${{ steps.secrets.outputs.firebaseAPIkey }} \
            --set-string config.firebase.messagingSenderId=${{ steps.secrets.outputs.firebaseMessagingSenderId }} \
            --set-string config.firebase.appId=${{ steps.secrets.outputs.firebaseAppId }} \
            --set-string config.cloudinary.cloudName=${{ steps.secrets.outputs.cloudinaryCloudName }} \
            --set-string config.cloudinary.apiKey=${{ steps.secrets.outputs.cloudinaryAPIKey }} \
            --set-string config.cloudinary.secret=${{ steps.secrets.outputs.cloudinarySecret }} \
            --set-string config.facebook.appId=${{ steps.secrets.outputs.facebookAppId }} \
            --set-string config.twitter.bearerToken=${{ steps.secrets.outputs.twitterBearerToken }} \
            --set clusterIssuer.createTLSCertificateIssuer=true \
            --set-string clusterIssuer.tlsCertificateIssuerEmail=dev.myriad@blocksphere.id \
            --set certificate.createTLSCertificate=true \
            --set ingress.enabled=true \
            --set-string ingress.className=nginx \
            --set-string ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
            --set-string ingress.host=app.stg.myriad.systems \
            --set ingress.tls=true \
            --set autoscaling.enabled=true
          kubectl rollout status deployment/myriad-web
